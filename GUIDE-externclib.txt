This is a guide on how to use lambda prolog external C libraries.

A lambda prolog "external library" can be best conceptualized as a module
that has C programs as its implementation instead of a .mod file. 
Programmers can integrate these libraries as additional modules and 
use them just like native predicates.

There are two files one needs to acquire for the library: one is a lambda
program signature file that defines the interface of the predicates available in
the library. The other file is the implementation of this signature as a
compiled C shared library object.  Creating these two files is usually the
responsibility of a library developer.


How to use the library
---------------------------------
After you acquire the necessary files, you can integrate the signature in your
own module by the following syntax:
  accum_extern <signame>

This allows you to use the predicates defined in the signature in your own code.
Typically the first several arguments should be bounded with some value, and
only the very last argument is allowed to have an unbound variable, because it's
usually the last argument that holds the return value of the corresponding C
computation.

The dynamic linker should be notified the location of the C shared library (.so file).
This can be done by setting the environment variable LD_LIBRARY_PATH:
  export LD_LIBRARY_PATH=your_path_for_libraries:$LD_LIBRARY_PATH
