The dynamic linking model we discussed actually works.

I'm using the folder "lib" to emulate the dedicated library path in teyjus 
directory. I have put two libraries inside: one implementing factorial and
the other implementing sine. They all use i/o functions from <stdio.h>. 
The sine function also uses the implementation from <math.h>. This is to
emulate the situation that a library further depends on other libraries.

Compile simulator.c by
  gcc -rdynamic -o tjsim simulator.c -ldl
You will be asked to enter the function name and the library name. Then
the simulator will call the corresponding function from the correct library.

Here is a sample run:
  Enter the name of the external function:
  fact
  Enter the name of the library the function belongs to:
  arith.so
  Function fact from lib_fact.so linked with simulator
  Calling fact from fact_wrapper

The message "Calling fact from fact_wrapper" just shows the right function
can be found from the library at run time. Right now it does nothing else
except printing. The actual result of the computation can be returned when
the wrapper function generator is implemented.
